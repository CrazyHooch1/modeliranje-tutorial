# Load our data set.
data(iris);
# Load libraries.
library(ggplot2);
library(caret);
training_split = createDataPartition(y = iris$Species, p = 0.70, list = FALSE);
training_set = iris[training_split,];
testing_set = iris[-training_split,];
# Load libraries.
library(ggplot2);
library(caret);
library(pROC)
training_split = createDataPartition(y = iris$Species, p = 0.70, list = FALSE);
training_set = iris[training_split,];
testing_set = iris[-training_split,];
model_fit = train(Species ~ ., method = "glm", data = training_set,
metric="ROC",
trControl =
trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE)); # Using all features.
iris$Species
library(Hmisc)
iris = iris[as.character(iris$Species) %nin% c("virginica"),]
training_split = createDataPartition(y = iris$Species, p = 0.70, list = FALSE);
training_set = iris[training_split,];
testing_set = iris[-training_split,];
model_fit = train(Species ~ ., method = "glm", data = training_set,
metric="ROC",
trControl =
trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE)); # Using all features.
test = iris[as.character(iris$Species) %nin% c("virginica"),]
data(iris);
iris$Species
test = iris
test$Species = as.character(test$Species)
test = iris[as.character(iris$Species) %nin% c("virginica"),]
test$Species = factor(test$Species,
labels = c("setosa", "versicolor"),
levels = c("setosa", "versicolor"))
training_split = createDataPartition(y = iris$Species, p = 0.70, list = FALSE);
training_set = iris[training_split,];
testing_set = iris[-training_split,];
model_fit = train(Species ~ ., method = "glm", data = training_set,
metric="ROC",
trControl =
trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE)); # Using all features.
training_set = test[training_split,];
testing_set = test[-training_split,];
model_fit = train(Species ~ ., method = "glm", data = training_set,
metric="ROC",
trControl =
trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE)); # Using all features.
View(test)
View(testing_set)
View(training_set)
test = iris
test$Species = as.character(test$Species)
test = iris[as.character(iris$Species) %nin% c("virginica"),]
test$Species = factor(test$Species,
labels = c("setosa", "versicolor"),
levels = c("setosa", "versicolor"))
training_split = createDataPartition(y = iris$Species, p = 0.70, list = FALSE);
training_set = test[training_split,];
testing_set = test[-training_split,];
View(training_set)
# Load our data set.
data(iris);
# Load libraries.
library(ggplot2);
library(caret);
library(pROC)
library(Hmisc)
test = iris
test$Species = as.character(test$Species)
test = iris[as.character(iris$Species) %nin% c("virginica"),]
test$Species = factor(test$Species,
labels = c("setosa", "versicolor"),
levels = c("setosa", "versicolor"))
training_split = createDataPartition(y = test$Species, p = 0.70, list = FALSE);
training_set = test[training_split,];
testing_set = test[-training_split,];
model_fit = train(Species ~ ., method = "glm", data = training_set,
metric="ROC",
trControl =
trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary,
savePredictions = TRUE,
classProbs = TRUE)); # Using all features.
model_fit
model_fit$results
model_fit$results$Spec
model_fit$results$parameter
model_fit$resample
pred = predict(model_fit, newdata = testing_set)
pred
rc = roc(testing_set$Species, pred$versicolor)
rc = roc(testing_set$Species, pred)
pred = predict(model_fit, newdata = testing_set , type="prob")
pred
rc = roc(testing_set$Species, pred)
rc = roc(testing_set$Species, pred$versicolor)
rc
rc$sensitivities
rc$thresholds
rc$predictor
rmarkdown::shiny_prerendered_clean('Sweave.Rnw')
conda
installed.packages()
install.packages("fpp")
library(fpp)
data("ausbeer")
x = ausbeer
x
plot(x)
stl = stl(x, s.window = "periodic")
plot(stl(x, s.window = "periodic"))
plot(forecast(auto.arima(x)))
Acf(forecast(auto.arima(x))$residuals)
install.packages("fpp")
library(fpp)
data("ausbeer")
x = ausbeer
plot(x)
Acf(forecast(auto.arima(x))$residuals)
?tsCV
far2 <- function(x, h){forecast(auto.arima(x), h=h)}
e = tsCV(x, 1)
sqrt(mean(e^2))
sqrt(mean(e^2, na.rm = TRUE))
e
x = ausbeer
far2 <- function(x, h){forecast(auto.arima(x), h=h)}
e = tsCV(ausbeer, far2, h= 1)
install.packages("ggfortify")
library(ggfortify)
autoplot(e)
sqrt(mean(e^2, na.rm = TRUE))
summary(e)
autoplot(forecast(auto.arima(ausbeer)))
far1 <- function(x, h){forecast(tbats(x), h=h)}
e1 = tsCV(ausbeer, far1, h= 1)
autoplot(e1)
sqrt(mean(e1^2, na.rm = TRUE))
autoplot(forecast(tbats(ausbeer)))
autoplot(forecast(tbats(ausbeer)))
setwd("~/Documents/Gerald/Work/Git/Research/Mario_Feature_Selection/modeliranje-tutorial/Tutorial 2")
getwd()
library(tidyverse)
library(data.table)
df = fread('data/mp_data_desc.csv')
View(df)
'fr_' %in% string
string = "fr_test"
'fr_' %in% string
cat_features = c('fr_Al_COO', 'fr_Al_OH', 'fr_Al_OH_noTert', 'fr_ArN', 'fr_Ar_COO', 'fr_Ar_N', 'fr_Ar_NH', 'fr_Ar_OH', 'fr_COO', 'fr_COO2', 'fr_C_O', 'fr_C_O_noCOO', 'fr_C_S', 'fr_HOCCN', 'fr_Imine', 'fr_NH0', 'fr_NH1', 'fr_NH2', 'fr_N_O', 'fr_Ndealkylation1', 'fr_Ndealkylation2', 'fr_Nhpyrrole', 'fr_SH', 'fr_aldehyde', 'fr_alkyl_carbamate', 'fr_alkyl_halide', 'fr_allylic_oxid', 'fr_amide', 'fr_amidine', 'fr_aniline', 'fr_aryl_methyl', 'fr_azide', 'fr_azo', 'fr_barbitur', 'fr_benzene', 'fr_benzodiazepine', 'fr_bicyclic', 'fr_diazo', 'fr_dihydropyridine', 'fr_epoxide', 'fr_ester', 'fr_ether', 'fr_furan', 'fr_guanido', 'fr_halogen', 'fr_hdrzine', 'fr_hdrzone', 'fr_imidazole', 'fr_imide', 'fr_isocyan', 'fr_isothiocyan', 'fr_ketone', 'fr_ketone_Topliss', 'fr_lactam', 'fr_lactone', 'fr_methoxy', 'fr_morpholine', 'fr_nitrile', 'fr_nitro', 'fr_nitro_arom', 'fr_nitro_arom_nonortho', 'fr_nitroso', 'fr_oxazole', 'fr_oxime', 'fr_para_hydroxylation', 'fr_phenol', 'fr_phenol_noOrthoHbond', 'fr_phos_acid', 'fr_phos_ester', 'fr_piperdine', 'fr_piperzine', 'fr_priamide', 'fr_prisulfonamd', 'fr_pyridine', 'fr_quatN', 'fr_sulfide', 'fr_sulfonamd', 'fr_sulfone', 'fr_term_acetylene', 'fr_tetrazole', 'fr_thiazole', 'fr_thiocyan', 'fr_thiophene', 'fr_unbrch_alkane', 'fr_urea')
cat_features
for col in colnames(df) {
print(col)
}
for(col in colnames(df)) {
print(col)
}
for(col in colnames(df)) {
if(col %in% cat_features) {
print(col)
}
}
for(col in colnames(df)) {
if(col %in% cat_features) {
print(df[,c(col)])
}
}
for(col in colnames(df)) {
if(col %in% cat_features) {
subset = df[,col]
}
}
subset = df[,1]
subset = df[,'fr_Al_COO']
df = fread('data/mp_data_desc.csv')
cat_features = c('fr_Al_COO', 'fr_Al_OH', 'fr_Al_OH_noTert', 'fr_ArN', 'fr_Ar_COO', 'fr_Ar_N', 'fr_Ar_NH', 'fr_Ar_OH', 'fr_COO', 'fr_COO2', 'fr_C_O', 'fr_C_O_noCOO', 'fr_C_S', 'fr_HOCCN', 'fr_Imine', 'fr_NH0', 'fr_NH1', 'fr_NH2', 'fr_N_O', 'fr_Ndealkylation1', 'fr_Ndealkylation2', 'fr_Nhpyrrole', 'fr_SH', 'fr_aldehyde', 'fr_alkyl_carbamate', 'fr_alkyl_halide', 'fr_allylic_oxid', 'fr_amide', 'fr_amidine', 'fr_aniline', 'fr_aryl_methyl', 'fr_azide', 'fr_azo', 'fr_barbitur', 'fr_benzene', 'fr_benzodiazepine', 'fr_bicyclic', 'fr_diazo', 'fr_dihydropyridine', 'fr_epoxide', 'fr_ester', 'fr_ether', 'fr_furan', 'fr_guanido', 'fr_halogen', 'fr_hdrzine', 'fr_hdrzone', 'fr_imidazole', 'fr_imide', 'fr_isocyan', 'fr_isothiocyan', 'fr_ketone', 'fr_ketone_Topliss', 'fr_lactam', 'fr_lactone', 'fr_methoxy', 'fr_morpholine', 'fr_nitrile', 'fr_nitro', 'fr_nitro_arom', 'fr_nitro_arom_nonortho', 'fr_nitroso', 'fr_oxazole', 'fr_oxime', 'fr_para_hydroxylation', 'fr_phenol', 'fr_phenol_noOrthoHbond', 'fr_phos_acid', 'fr_phos_ester', 'fr_piperdine', 'fr_piperzine', 'fr_priamide', 'fr_prisulfonamd', 'fr_pyridine', 'fr_quatN', 'fr_sulfide', 'fr_sulfonamd', 'fr_sulfone', 'fr_term_acetylene', 'fr_tetrazole', 'fr_thiazole', 'fr_thiocyan', 'fr_thiophene', 'fr_unbrch_alkane', 'fr_urea')
for(col in colnames(df)) {
if(col %in% cat_features) {
subset = df[,col]
}
}
for(col in colnames(df)) {
if(col %in% cat_features) {
subset = df[,col, with=F]
}
}
View(subset)
for(col in colnames(df)) {
if(col %in% cat_features) {
df[,col, with=F] = paste0(df[,col, with=F], "x", col)
}
}
df[,col,] = paste0(df[,col], "x", col)
, with=F
View(df)
j=12
col_name = colnames(df[,j])
col_name = colnames(df[,j, with = FALSE])
col_name
col_name %in% cat_features
for(j in 1:ncol(df)) {
col_name = colnames(df[,j, with = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
df[i,j] = paste0(df[i,j], 'x', col_name)
}
}
}
for(j in 1:ncol(df)) {
col_name = colnames(df[,j, with = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
df[i,j, with= F] = paste0(df[i,j], 'x', col_name)
}
}
}
df[i,j, with= F] = paste0(df[i,j, with = F], 'x', col_name)
df[1,1]
for(j in 1:ncol(df)) {
col_name = colnames(df[,j, with = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
print(df[i,j])# = paste0(df[i,j, with = F], 'x', col_name)
}
}
}
1:ncol(df)
df = as.data.frame(fread('data/mp_data_desc.csv'))
for(j in 1:ncol(df)) {
col_name = colnames(df[,j])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
print(df[i,j])# = paste0(df[i,j, with = F], 'x', col_name)
}
}
}
j = 1
col_name = colnames(df[,j])
col_name
ames(df[,j])
names(df[,j])
names(df[,1])
col_name = names(df[,c(1), drop = FALSE]
)
View(df)
df = as.data.frame(fread('data/mp_data_desc.csv'))
cat_features = c('fr_Al_COO', 'fr_Al_OH', 'fr_Al_OH_noTert', 'fr_ArN', 'fr_Ar_COO', 'fr_Ar_N', 'fr_Ar_NH', 'fr_Ar_OH', 'fr_COO', 'fr_COO2', 'fr_C_O', 'fr_C_O_noCOO', 'fr_C_S', 'fr_HOCCN', 'fr_Imine', 'fr_NH0', 'fr_NH1', 'fr_NH2', 'fr_N_O', 'fr_Ndealkylation1', 'fr_Ndealkylation2', 'fr_Nhpyrrole', 'fr_SH', 'fr_aldehyde', 'fr_alkyl_carbamate', 'fr_alkyl_halide', 'fr_allylic_oxid', 'fr_amide', 'fr_amidine', 'fr_aniline', 'fr_aryl_methyl', 'fr_azide', 'fr_azo', 'fr_barbitur', 'fr_benzene', 'fr_benzodiazepine', 'fr_bicyclic', 'fr_diazo', 'fr_dihydropyridine', 'fr_epoxide', 'fr_ester', 'fr_ether', 'fr_furan', 'fr_guanido', 'fr_halogen', 'fr_hdrzine', 'fr_hdrzone', 'fr_imidazole', 'fr_imide', 'fr_isocyan', 'fr_isothiocyan', 'fr_ketone', 'fr_ketone_Topliss', 'fr_lactam', 'fr_lactone', 'fr_methoxy', 'fr_morpholine', 'fr_nitrile', 'fr_nitro', 'fr_nitro_arom', 'fr_nitro_arom_nonortho', 'fr_nitroso', 'fr_oxazole', 'fr_oxime', 'fr_para_hydroxylation', 'fr_phenol', 'fr_phenol_noOrthoHbond', 'fr_phos_acid', 'fr_phos_ester', 'fr_piperdine', 'fr_piperzine', 'fr_priamide', 'fr_prisulfonamd', 'fr_pyridine', 'fr_quatN', 'fr_sulfide', 'fr_sulfonamd', 'fr_sulfone', 'fr_term_acetylene', 'fr_tetrazole', 'fr_thiazole', 'fr_thiocyan', 'fr_thiophene', 'fr_unbrch_alkane', 'fr_urea')
for(j in 1:ncol(df)) {
col_name = names(df[,c(1), drop = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
print(df[i,j]) = paste0(df[i,j], 'x', col_name)
}
}
}
View(df)
df = as.data.frame(fread('data/mp_data_desc.csv'))
cat_features = c('fr_Al_COO', 'fr_Al_OH', 'fr_Al_OH_noTert', 'fr_ArN', 'fr_Ar_COO', 'fr_Ar_N', 'fr_Ar_NH', 'fr_Ar_OH', 'fr_COO', 'fr_COO2', 'fr_C_O', 'fr_C_O_noCOO', 'fr_C_S', 'fr_HOCCN', 'fr_Imine', 'fr_NH0', 'fr_NH1', 'fr_NH2', 'fr_N_O', 'fr_Ndealkylation1', 'fr_Ndealkylation2', 'fr_Nhpyrrole', 'fr_SH', 'fr_aldehyde', 'fr_alkyl_carbamate', 'fr_alkyl_halide', 'fr_allylic_oxid', 'fr_amide', 'fr_amidine', 'fr_aniline', 'fr_aryl_methyl', 'fr_azide', 'fr_azo', 'fr_barbitur', 'fr_benzene', 'fr_benzodiazepine', 'fr_bicyclic', 'fr_diazo', 'fr_dihydropyridine', 'fr_epoxide', 'fr_ester', 'fr_ether', 'fr_furan', 'fr_guanido', 'fr_halogen', 'fr_hdrzine', 'fr_hdrzone', 'fr_imidazole', 'fr_imide', 'fr_isocyan', 'fr_isothiocyan', 'fr_ketone', 'fr_ketone_Topliss', 'fr_lactam', 'fr_lactone', 'fr_methoxy', 'fr_morpholine', 'fr_nitrile', 'fr_nitro', 'fr_nitro_arom', 'fr_nitro_arom_nonortho', 'fr_nitroso', 'fr_oxazole', 'fr_oxime', 'fr_para_hydroxylation', 'fr_phenol', 'fr_phenol_noOrthoHbond', 'fr_phos_acid', 'fr_phos_ester', 'fr_piperdine', 'fr_piperzine', 'fr_priamide', 'fr_prisulfonamd', 'fr_pyridine', 'fr_quatN', 'fr_sulfide', 'fr_sulfonamd', 'fr_sulfone', 'fr_term_acetylene', 'fr_tetrazole', 'fr_thiazole', 'fr_thiocyan', 'fr_thiophene', 'fr_unbrch_alkane', 'fr_urea')
for(j in 1:ncol(df)) {
col_name = names(df[,c(1), drop = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
df[i,j] = paste0(df[i,j], 'x', col_name)
}
}
}
View(df)
for(j in 1:ncol(df)) {
col_name = names(df[,j, drop = FALSE])
if(col_name %in% cat_features) {
for (i in 1:nrow(df)) {
df[i,j] = paste0(df[i,j], 'x', col_name)
}
}
}
View(df)
fwrite(df, 'data/mp_data_desc_alt.csv')
